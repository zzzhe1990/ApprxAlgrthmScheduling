//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_35
.address_size 64

	// .weak	cudaMalloc

.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaFuncGetAttributes
.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaDeviceGetAttribute
.weak .func  (.param .b32 func_retval0) cudaDeviceGetAttribute(
	.param .b64 cudaDeviceGetAttribute_param_0,
	.param .b32 cudaDeviceGetAttribute_param_1,
	.param .b32 cudaDeviceGetAttribute_param_2
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaGetDevice
.weak .func  (.param .b32 func_retval0) cudaGetDevice(
	.param .b64 cudaGetDevice_param_0
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessor
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessor(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessor_param_3
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .weak	cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags
.weak .func  (.param .b32 func_retval0) cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_0,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_1,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_2,
	.param .b64 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_3,
	.param .b32 cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags_param_4
)
{
	.reg .b32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	ret;
}

	// .globl	_Z15gpu_sameVectorsPiS_i
.visible .func  (.param .b32 func_retval0) _Z15gpu_sameVectorsPiS_i(
	.param .b64 _Z15gpu_sameVectorsPiS_i_param_0,
	.param .b64 _Z15gpu_sameVectorsPiS_i_param_1,
	.param .b32 _Z15gpu_sameVectorsPiS_i_param_2
)
{
	.reg .pred 	%p<4>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<6>;


	ld.param.u64 	%rd1, [_Z15gpu_sameVectorsPiS_i_param_0];
	ld.param.u64 	%rd2, [_Z15gpu_sameVectorsPiS_i_param_1];
	ld.param.u32 	%r4, [_Z15gpu_sameVectorsPiS_i_param_2];
	mov.u32 	%r6, 1;
	mov.u32 	%r5, 0;
	setp.lt.s32	%p1, %r4, 1;
	mov.u32 	%r13, %r6;
	@%p1 bra 	BB6_4;

	mov.u32 	%r14, %r5;

BB6_2:
	mul.wide.s32 	%rd3, %r14, 4;
	add.s64 	%rd4, %rd1, %rd3;
	add.s64 	%rd5, %rd2, %rd3;
	ld.u32 	%r8, [%rd5];
	ld.u32 	%r9, [%rd4];
	add.s32 	%r14, %r14, 1;
	setp.ne.s32	%p2, %r9, %r8;
	mov.u32 	%r13, %r5;
	@%p2 bra 	BB6_4;

	setp.lt.s32	%p3, %r14, %r4;
	mov.u32 	%r12, %r6;
	mov.u32 	%r13, %r12;
	@%p3 bra 	BB6_2;

BB6_4:
	st.param.b32	[func_retval0+0], %r13;
	ret;
}

	// .globl	_Z15gpu_sameVectorsPiii
.visible .func  (.param .b32 func_retval0) _Z15gpu_sameVectorsPiii(
	.param .b64 _Z15gpu_sameVectorsPiii_param_0,
	.param .b32 _Z15gpu_sameVectorsPiii_param_1,
	.param .b32 _Z15gpu_sameVectorsPiii_param_2
)
{
	.local .align 4 .b8 	__local_depot7[64];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<4>;
	.reg .b32 	%r<20>;
	.reg .b64 	%rd<9>;


	mov.u64 	%rd8, __local_depot7;
	cvta.local.u64 	%SP, %rd8;
	ld.param.u64 	%rd2, [_Z15gpu_sameVectorsPiii_param_0];
	ld.param.u32 	%r10, [_Z15gpu_sameVectorsPiii_param_1];
	ld.param.u32 	%r6, [_Z15gpu_sameVectorsPiii_param_2];
	add.u64 	%rd3, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd3;
	mov.u32 	%r8, 0;
	st.local.u32 	[%rd1], %r8;
	st.local.u32 	[%rd1+4], %r8;
	st.local.u32 	[%rd1+8], %r8;
	st.local.u32 	[%rd1+12], %r8;
	st.local.u32 	[%rd1+16], %r8;
	st.local.u32 	[%rd1+20], %r8;
	st.local.u32 	[%rd1+24], %r8;
	st.local.u32 	[%rd1+28], %r8;
	st.local.u32 	[%rd1+32], %r8;
	st.local.u32 	[%rd1+36], %r8;
	mov.u32 	%r11, 2;
	st.local.u32 	[%rd1+40], %r11;
	st.local.u32 	[%rd1+44], %r8;
	st.local.u32 	[%rd1+48], %r8;
	st.local.u32 	[%rd1+52], %r8;
	st.local.u32 	[%rd1+56], %r8;
	st.local.u32 	[%rd1+60], %r10;
	mov.u32 	%r9, 1;
	mov.u32 	%r15, %r8;
	setp.lt.s32	%p1, %r6, 1;
	mov.u32 	%r18, %r9;
	@%p1 bra 	BB7_4;

	mov.u32 	%r19, %r8;
	bra.uni 	BB7_2;

BB7_5:
	mul.wide.s32 	%rd6, %r19, 4;
	add.s64 	%rd7, %rd1, %rd6;
	ld.local.u32 	%r15, [%rd7];

BB7_2:
	mov.u32 	%r1, %r15;
	mul.wide.s32 	%rd4, %r19, 4;
	add.s64 	%rd5, %rd2, %rd4;
	ld.u32 	%r13, [%rd5];
	add.s32 	%r19, %r19, 1;
	setp.ne.s32	%p2, %r13, %r1;
	mov.u32 	%r18, %r8;
	@%p2 bra 	BB7_4;

	setp.lt.s32	%p3, %r19, %r6;
	mov.u32 	%r17, %r9;
	mov.u32 	%r18, %r17;
	@%p3 bra 	BB7_5;

BB7_4:
	st.param.b32	[func_retval0+0], %r18;
	ret;
}

	// .globl	_Z15gpu_sameVectorsPiS_iS_
.visible .entry _Z15gpu_sameVectorsPiS_iS_(
	.param .u64 _Z15gpu_sameVectorsPiS_iS__param_0,
	.param .u64 _Z15gpu_sameVectorsPiS_iS__param_1,
	.param .u32 _Z15gpu_sameVectorsPiS_iS__param_2,
	.param .u64 _Z15gpu_sameVectorsPiS_iS__param_3
)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<14>;
	.reg .b64 	%rd<10>;


	ld.param.u64 	%rd1, [_Z15gpu_sameVectorsPiS_iS__param_0];
	ld.param.u64 	%rd2, [_Z15gpu_sameVectorsPiS_iS__param_1];
	ld.param.u32 	%r5, [_Z15gpu_sameVectorsPiS_iS__param_2];
	ld.param.u64 	%rd3, [_Z15gpu_sameVectorsPiS_iS__param_3];
	mov.u32 	%r6, %ctaid.x;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	setp.ge.s32	%p1, %r1, %r5;
	@%p1 bra 	BB8_2;

	cvta.to.global.u64 	%rd4, %rd1;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd2;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.u32 	%r11, [%rd8];
	ld.global.u32 	%r12, [%rd6];
	sub.s32 	%r10, %r12, %r11;
	// inline asm
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r10, 0; 
	vote.all.pred 	%p2, %p1; 
	selp.s32 	%r13, 1, 0, %p2; 
	}
	// inline asm

BB8_2:
	setp.ne.s32	%p2, %r1, 0;
	@%p2 bra 	BB8_4;

	cvta.to.global.u64 	%rd9, %rd3;
	st.global.u32 	[%rd9], %r13;

BB8_4:
	ret;
}


